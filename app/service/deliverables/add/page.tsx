'use client';

import * as React from 'react';
import { useState } from 'react';
import PageLayout from '@/app/components/PageLayout';
import { Tile, TextInput, Button } from '@carbon/react';
import { Save } from '@carbon/icons-react';
import { useRouter } from 'next/navigation';
import { create } from '@/lib/apiClient';
import { useNotification } from '@/app/context/NotificationContext';

interface Deliverable {
  id_deliverables_document: string;
  customer_name: string;
  client_email: string;
  file_description: string;
  id_user: string | null;
  created_at: string;
  updated_at: string;
  Documents: Document[];
}

// Type for creating a deliverable, excluding fields generated by the backend
interface CreateDeliverablePayload {
  customer_name: string;
  client_email: string;
  file_description: string;
  id_user?: string | null;
}

const headers = [
  { key: 'customer_name', header: 'Customer Name' },
  { key: 'client_email', header: 'Customer Email' },
  { key: 'file_description', header: 'File Description' },
];

export default function CreateDeliverablePage() {
  const router = useRouter();
  const { addNotification } = useNotification();
  const [formState, setFormState] = useState<CreateDeliverablePayload>({
    customer_name: '',
    client_email: '',
    file_description: '',
    id_user: null,
  });
  const [isSaving, setIsSaving] = useState(false);

  const breadcrumbData = [
    { label: 'Home', href: '/' },
    { label: 'Service', href: '' },
    { label: 'Deliverables', href: '/service/deliverables' },
    { label: 'Create Deliverable', href: '', isCurrentPage: true },
  ];

  const handleSubmit = async () => {
    setIsSaving(true);
    try {
      // Validate required fields
      if (!formState.customer_name || !formState.client_email || !formState.file_description) {
        addNotification('error', 'Please fill in all required fields.');
        setIsSaving(false);
        return;
      }

      // Prepare payload
      const payload: CreateDeliverablePayload = {
        customer_name: formState.customer_name,
        client_email: formState.client_email,
        file_description: formState.file_description,
        id_user: formState.id_user || null,
      };

      // Call API to create new deliverable
      const response = await create<Deliverable>('deliverables-documents', payload);

      // Redirect to the new deliverable's page
      router.push(`/service/deliverables/${response.data.id_deliverables_document}`);
      addNotification('success', 'Deliverable created successfully!');
    } catch (error) {
      console.error('Error creating deliverable:', error);
      addNotification('error', 'Failed to create deliverable. Please try again later.');
    } finally {
      setIsSaving(false);
    }
  };

  const isFormValid = formState.customer_name && formState.client_email && formState.file_description;

  return (
    <PageLayout
      breadcrumbData={breadcrumbData}
      buttonLabel="Create"
      buttonIcon={Save}
      buttonOnClick={handleSubmit}
      buttonDisabled={!isFormValid || isSaving}
    >
      <Tile className="mb-4">
        <h1 className="text-base font-bold mb-4">Create New Deliverable</h1>
        <div className="grid grid-cols-2 gap-4 mt-6">
          <div className="col-span-2">
            <div className="grid grid-cols-2 gap-4 bg-[#262626] rounded-md">
              {headers.map((h) => (
                <TextInput
                  key={h.key}
                  id={h.key}
                  labelText={h.header}
                  value={String(formState[h.key as keyof CreateDeliverablePayload] ?? '')}
                  onChange={(e) => {
                    const newValue = e.target.value;
                    setFormState((prev) => ({
                      ...prev,
                      [h.key]: newValue || null,
                    }));
                  }}
                  style={{
                    marginBottom: 16,
                    backgroundColor: '#393939',
                    border: 'none',
                    borderBottom: '1px solid #494A4C',
                    width: '100%',
                  }}
                />
              ))}
            </div>
          </div>
        </div>
      </Tile>
    </PageLayout>
  );
}